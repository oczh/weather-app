{"version":3,"file":"242.915cb4f2548a2ed3.js","mappings":"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","names":["i0","data_r10","time","data_r11","weather_icon","data_r12","weather","_c0","data_r13","temperature","data_r14","windSpeed","data_r15","cloudness","data_r16","pressure","data_r17","humidity","data_r18","rain","data_r19","snow","routes","path","component","ForecastComponent","constructor","service","this","ngOnInit","readNavigatorCoords","subscription","coord$","subscribe","next","v","console","log","getValue","lat","getForcastData","error","e","ngOnDestroy","unsubscribe","static","t","i1","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","ForecastComponent_th_9_Template","ForecastComponent_td_14_Template","ForecastComponent_td_18_Template","ForecastComponent_td_22_Template","ForecastComponent_td_26_Template","ForecastComponent_td_30_Template","ForecastComponent_td_34_Template","ForecastComponent_td_38_Template","ForecastComponent_td_42_Template","ForecastComponent_td_46_Template","forcastWearherData","location","forecastArr","ForecastRoutingModule","oAB","cJS","RouterModule","forChild","ForecastModule","CommonModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/forecast/forecast.component.html","./src/app/forecast/forecast-routing.module.ts","./src/app/forecast/forecast.component.ts","./src/app/forecast/forecast.module.ts"],"sourcesContent":["<!--\r\n<p>{{RequestRxService.forcastWearherData | json}}</p>\r\n<p *ngFor=\"let data of RequestRxService.forcastWearherData.forecastArr\">{{data.time}}</p>\r\n-->\r\n<app-location-form></app-location-form>\r\n<div class=\"table-responsive\">\r\n    <table class=\"table table-sm overflow-scroll table-borderless caption-top\">\r\n        <caption>{{service.forcastWearherData.location}}</caption>\r\n        <thead>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"col\">Time</th>\r\n                <th class=\"bg-transparent align-top\" scope=\"col\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">{{data.time}}</th>\r\n            </tr>\r\n            \r\n        </thead>\r\n        <tbody class=\"bg-transparent\">\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Weather icon</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">\r\n                    <div class=\"box d-flex align-items-center justify-content-center\">\r\n                        <img style=\"width: 4rem;\"  alt=\"Weather icon\"\r\n                        src=\"http://openweathermap.org/img/w/{{data.weather_icon}}.png\">\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Weather</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">\r\n                    <div class=\"boxes l-boxes\">{{data.weather}}</div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Temperature [celsius]</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">\r\n                    <div [ngClass]=\"{\r\n                        'temp-verycold': data.temperature <= 0,\r\n                        'temp-cold': data.temperature > 0 && data.temperature <= 10, \r\n                        'temp-mild-c': data.temperature > 10 && data.temperature <= 20,\r\n                        'temp-mild-w': data.temperature > 20 && data.temperature <= 30,\r\n                        'temp-warm': data.temperature > 30}\"\r\n                        class=\"boxes opacity-50 fw-bold\">\r\n                            {{data.temperature}}\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Wind speed [meter/sec]</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">\r\n                    <div class=\"boxes l-boxes\">{{data.windSpeed}}</div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Cloudness [%]</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">\r\n                    <div class=\"boxes\">{{data.cloudness}}</div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Pressure [hPa]</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">\r\n                    <div class=\"boxes l-boxes\">{{data.pressure}}</div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Humidity [%]</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">\r\n                    <div class=\"boxes\">{{data.humidity}}</div>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Rain [mm/1h]</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">{{data.rain}}</td>\r\n            </tr>\r\n            <tr>\r\n                <th class=\"bg-transparent align-middle\" scope=\"row\">Snow [mm/1h]</th>\r\n                <td class=\"bg-transparent\" *ngFor=\"let data of service.forcastWearherData.forecastArr\">{{data.snow}}</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ForecastComponent } from './forecast.component';\r\n\r\nconst routes: Routes = [{ path: '', component: ForecastComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ForecastRoutingModule { }\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { RequestRxService } from '../request-rx.service';\r\nimport { Coord } from '../types_interfaces';\r\nimport { SubscriptionLike } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-forecast',\r\n  templateUrl: './forecast.component.html',\r\n  styleUrls: ['./forecast.component.scss']\r\n})\r\n\r\nexport class ForecastComponent implements OnInit, OnDestroy {\r\n  subscription: SubscriptionLike;\r\n  constructor(public service: RequestRxService) {\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.service.readNavigatorCoords()\r\n    this.subscription = this.service.coord$.subscribe({\r\n      next: (v: Coord) => {\r\n        console.log(this.service.coord$.getValue())\r\n        if(this.service.coord$.getValue()?.lat !== 0){\r\n          this.service.getForcastData();\r\n        }\r\n      },\r\n      error: (e: any) => {}\r\n    })\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe()\r\n  }\r\n}\r\n/** \r\nexport class ForecastComponent {\r\n  constructor(public RequestRxService: RequestsService) {\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    //this.RequestRxService.getForcastWeather();\r\n    this.RequestRxService.makeweatherobject(false, false)\r\n  }\r\n} */ \r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ForecastRoutingModule } from './forecast-routing.module';\r\nimport { ForecastComponent } from './forecast.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ForecastComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ForecastRoutingModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class ForecastModule { }\r\n"],"x_google_ignoreList":[]}
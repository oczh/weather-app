{"version":3,"file":"common.5692391e04943c76.js","mappings":"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","names":["LocationFormComponent","constructor","requestRxServise","this","onSubmit","form","getCoordinatesByQuery","value","location","static","t","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_0__","Xpm","selectors","decls","vars","consts","template","rf","ctx","_r2","_r0","RequestRxService","http","coord$","BehaviorSubject","lat","lon","appid","lang","navigator","language","units","currentWeatherData","forcastWearherData","curWeaDatasArr","readNavigatorCoords","geolocation","getCurrentPosition","data","next","coords","latitude","longitude","city","get","subscribe","v","console","log","error","e","complete","info","getCurrentData","getValue","makeCurrentWeatherObject","getForcastData","makeForecastWeatherObject","request","datas","name","weather_icon","weather","icon","main","temperature","Math","round","temp","windSpeed","wind","speed","cloudness","clouds","all","pressure","humidity","sunrise","Date","sys","toLocaleTimeString","hour","minute","sunset","rain","snow","push","Map","map","item","values","forecastArr","i","list","length","time","dt_txt","weekday","dayPeriod","_angular_core__WEBPACK_IMPORTED_MODULE_1__","Yz7","factory","Éµfac","providedIn","SharedModule","oAB","cJS","CommonModule","FormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/location-form/location-form.component.ts","./src/app/location-form/location-form.component.html","./src/app/request-rx.service.ts","./src/app/shared/shared.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { RequestRxService } from '../request-rx.service';\r\n\r\n@Component({\r\n  selector: 'app-location-form',\r\n  templateUrl: './location-form.component.html',\r\n  styleUrls: ['./location-form.component.scss']\r\n})\r\nexport class LocationFormComponent {\r\n\r\n  constructor(public requestRxServise: RequestRxService) {}\r\n  \r\n  onSubmit(form: NgForm) {\r\n    this.requestRxServise.getCoordinatesByQuery(form.value.location)\r\n  }\r\n}\r\n","<form  #locationF=\"ngForm\" (ngSubmit)=\"onSubmit(locationF)\" novalidate>\r\n    <div class=\"form-row align-items-center opacity-30\">\r\n      <div class=\"col-sm-3 my-1\">\r\n        <label class=\"sr-only\" for=\"location\">Other location</label>\r\n        <input ngModel type=\"text\" class=\"form-control\" name=\"location\" id=\"location\" #location=\"ngModel\" \r\n         >\r\n         <!--placeholder={{RequestRxService.forcastWearherData.location}}-->\r\n      </div>\r\n      <div class=\"col-auto my-1\">\r\n        <button type=\"submit\" class=\"btn btn-success\">Submit</button>\r\n      </div>\r\n    </div>\r\n  </form>","import { Injectable } from '@angular/core';\r\nimport { Coord, currentWeatherObject, forecastObj, forecastWeatherObject, local_name, weatherDataObj } from './types_interfaces';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RequestRxService {\r\n  coord$ = new BehaviorSubject<Coord>({lat : 0, lon : 0})\r\n  private appid = '6c46aa43db7539a6daf11a763626b3d2';\r\n  lang = navigator.language;\r\n  units = 'metric';\r\n  currentWeatherData = {} as weatherDataObj;\r\n  forcastWearherData = {} as forecastObj;\r\n  curWeaDatasArr : weatherDataObj[] = [];\r\n\r\n  constructor(public http: HttpClient) {}\r\n\r\n  readNavigatorCoords() {\r\n    navigator.geolocation.getCurrentPosition((data) => {\r\n      this.coord$.next({lat: data.coords.latitude, lon:data.coords.longitude});\r\n    });\r\n  }\r\n  \r\n  getCoordinatesByQuery(city: string){\r\n    this.http.get<local_name[]>(`https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=5&appid=${this.appid}`).subscribe({\r\n      next: (v) =>{ \r\n        console.log(v)\r\n        this.coord$.next({lat: v[0].lat, lon : v[0].lon});\r\n      },\r\n      error: (e) => console.error(e),\r\n      complete: () => console.info('complete: getCoordinatesByQuery')\r\n    });\r\n  }\r\n\r\n  getCurrentData() {\r\n    this.http.get<currentWeatherObject>(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${this.coord$.getValue().lat}&lon=${this.coord$.getValue().lon}&lang=${this.lang}&appid=${this.appid}&units=${this.units}`\r\n    ).subscribe({\r\n      next: (v: currentWeatherObject) => {\r\n        this.makeCurrentWeatherObject(v);\r\n      },\r\n      error: (e: any) => console.error(e),\r\n      complete: () => console.info('complete: getCurrentData'),\r\n    });\r\n  }\r\n\r\n  getForcastData() {\r\n    return this.http.get<forecastWeatherObject>(\r\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${this.coord$.getValue().lat}&lon=${this.coord$.getValue().lon}&lang=${this.lang}&appid=${this.appid}&units=${this.units}`\r\n    ).subscribe({\r\n      next: (v: forecastWeatherObject) => {\r\n        this.makeForecastWeatherObject(v);\r\n      },\r\n      error: (e: any) => console.error(e),\r\n      complete: () => console.info('complete: getForcastData'),\r\n    });\r\n  }\r\n\r\n  makeCurrentWeatherObject(request: currentWeatherObject) {\r\n    let datas = {} as weatherDataObj\r\n    datas.location = request.name;\r\n    datas.weather_icon = request.weather[0].icon;\r\n    datas.weather = request.weather[0].main;\r\n    datas.temperature = Math.round(request.main.temp);\r\n    datas.windSpeed = Math.round(request.wind.speed);\r\n    datas.cloudness = request.clouds.all;\r\n    datas.pressure = request.main.pressure;\r\n    datas.humidity = request.main.humidity;\r\n    datas.sunrise = new Date(\r\n        request.sys.sunrise * 1000\r\n      ).toLocaleTimeString(this.lang, {\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n    });\r\n    datas.sunset = new Date(\r\n        request.sys.sunset * 1000\r\n      ).toLocaleTimeString(this.lang, {\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n    });\r\n    datas.rain = request.rain?.['1h'];\r\n    datas.snow = request.snow?.['1h'];\r\n    this.curWeaDatasArr.push(datas);\r\n    this.curWeaDatasArr = [...new Map(this.curWeaDatasArr.map(item => [item.location, item])).values()];\r\n  }\r\n\r\n  makeForecastWeatherObject(request: forecastWeatherObject) { \r\n    this.forcastWearherData.location = request.city.name;\r\n    this.forcastWearherData.forecastArr = [];\r\n    for (let i = 0; i < request.list.length; i++) {\r\n      let datas = {} as weatherDataObj;\r\n      datas.time =\r\n        new Date(request.list[i].dt_txt).toLocaleTimeString(this.lang, {\r\n          weekday: 'long',\r\n          hour: 'numeric',\r\n          dayPeriod: 'short',\r\n        }) + 'h';\r\n      datas.weather_icon = request.list[i].weather[0].icon;\r\n      datas.weather = request.list[i].weather[0].main;\r\n      datas.temperature = Math.round(request.list[i].main.temp);\r\n      datas.windSpeed = Math.round(request.list[i].wind.speed);\r\n      datas.cloudness = request.list[i].clouds.all;\r\n      datas.pressure = request.list[i].main.pressure;\r\n      datas.humidity = request.list[i].main.humidity;\r\n      datas.rain = request.list[i].rain?.['3h'];\r\n      datas.snow = request.list[i].snow?.['3h'];\r\n      this.forcastWearherData.forecastArr.push(datas);\r\n    }\r\n  } \r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LocationFormComponent } from '../location-form/location-form.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LocationFormComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  exports: [\r\n    LocationFormComponent\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n"],"x_google_ignoreList":[]}